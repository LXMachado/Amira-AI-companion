//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String            @id() @default(uuid())
  name             String?
  email            String?           @unique()
  pictureUrl       String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  stripeCustomerId String?
  status           UserStatus        @default(VERIFIED)
  globalRole       String            @default("USER")
  /// @password
  /// @omit
  password         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt()
  pwaSubscriptions PwaSubscription[] @relation("user")
  companions       Companion[]       @relation("user")
  conversations    Conversation[]    @relation("user")
  memorys          Memory[]          @relation("user")
  activitys        Activity[]        @relation("user")
  achievements     Achievement[]     @relation("user")
  purchases        Purchase[]        @relation("user")
  notifications    Notification[]    @relation("user")
}

/// @@allow('all', true)
model Companion {
  id                String   @id() @default(uuid())
  name              String
  voiceId           String?
  personalityTraits String?
  interests         String?
  avatarTemplate    String?
  relationshipLevel Float?
  userId            String
  user              User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Conversation {
  id        String    @id() @default(uuid())
  type      String?
  setting   String?
  theme     String?
  userId    String
  user      User?     @relation(fields: [userId], references: [id], name: "user")
  messages  Message[] @relation("conversation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id             String        @id() @default(uuid())
  content        String?
  type           String?
  sender         String?
  conversationId String
  conversation   Conversation? @relation(fields: [conversationId], references: [id], name: "conversation")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Memory {
  id           String   @id() @default(uuid())
  type         String?
  content      String?
  privacyLevel Float?
  moodRating   Float?
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Activity {
  id        String   @id() @default(uuid())
  type      String?
  score     Float?
  status    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Achievement {
  id        String   @id() @default(uuid())
  type      String?
  progress  Float?
  status    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Purchase {
  id        String   @id() @default(uuid())
  itemType  String?
  itemId    String?
  status    String?
  amount    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id        String   @id() @default(uuid())
  type      String?
  content   String?
  status    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
